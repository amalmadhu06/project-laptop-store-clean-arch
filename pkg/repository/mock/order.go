// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amalmadhu06/project-laptop-store-clean-arch/pkg/repository/interface (interfaces: OrderRepository)

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	context "context"
	reflect "reflect"

	domain "github.com/amalmadhu06/project-laptop-store-clean-arch/pkg/domain"
	model "github.com/amalmadhu06/project-laptop-store-clean-arch/pkg/util/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// BuyAll mocks base method.
func (m *MockOrderRepository) BuyAll(arg0 context.Context, arg1 int, arg2 model.PlaceAllOrders) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyAll indicates an expected call of BuyAll.
func (mr *MockOrderRepositoryMockRecorder) BuyAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyAll", reflect.TypeOf((*MockOrderRepository)(nil).BuyAll), arg0, arg1, arg2)
}

// BuyProductItem mocks base method.
func (m *MockOrderRepository) BuyProductItem(arg0 context.Context, arg1 int, arg2 model.PlaceOrder) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyProductItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyProductItem indicates an expected call of BuyProductItem.
func (mr *MockOrderRepositoryMockRecorder) BuyProductItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyProductItem", reflect.TypeOf((*MockOrderRepository)(nil).BuyProductItem), arg0, arg1, arg2)
}

// CancelOrder mocks base method.
func (m *MockOrderRepository) CancelOrder(arg0 context.Context, arg1, arg2 int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelOrder indicates an expected call of CancelOrder.
func (mr *MockOrderRepositoryMockRecorder) CancelOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelOrder", reflect.TypeOf((*MockOrderRepository)(nil).CancelOrder), arg0, arg1, arg2)
}

// ReturnRequest mocks base method.
func (m *MockOrderRepository) ReturnRequest(arg0 context.Context, arg1 model.ReturnRequest) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnRequest", arg0, arg1)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReturnRequest indicates an expected call of ReturnRequest.
func (mr *MockOrderRepositoryMockRecorder) ReturnRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnRequest", reflect.TypeOf((*MockOrderRepository)(nil).ReturnRequest), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockOrderRepository) UpdateOrder(arg0 context.Context, arg1 model.UpdateOrder) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrder), arg0, arg1)
}

// ViewAllOrders mocks base method.
func (m *MockOrderRepository) ViewAllOrders(arg0 context.Context, arg1 int) ([]domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllOrders", arg0, arg1)
	ret0, _ := ret[0].([]domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllOrders indicates an expected call of ViewAllOrders.
func (mr *MockOrderRepositoryMockRecorder) ViewAllOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllOrders", reflect.TypeOf((*MockOrderRepository)(nil).ViewAllOrders), arg0, arg1)
}

// ViewOrderById mocks base method.
func (m *MockOrderRepository) ViewOrderById(arg0 context.Context, arg1, arg2 int) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewOrderById", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewOrderById indicates an expected call of ViewOrderById.
func (mr *MockOrderRepositoryMockRecorder) ViewOrderById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewOrderById", reflect.TypeOf((*MockOrderRepository)(nil).ViewOrderById), arg0, arg1, arg2)
}

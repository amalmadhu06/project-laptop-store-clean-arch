// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amalmadhu06/project-laptop-store-clean-arch/pkg/usecase/interface (interfaces: UserUseCase)

// Package mockUsecase is a generated GoMock package.
package mockUsecase

import (
	context "context"
	reflect "reflect"

	domain "github.com/amalmadhu06/project-laptop-store-clean-arch/pkg/domain"
	model "github.com/amalmadhu06/project-laptop-store-clean-arch/pkg/util/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockUserUseCase) AddAddress(arg0 context.Context, arg1 model.AddressInput, arg2 int) (domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockUserUseCaseMockRecorder) AddAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockUserUseCase)(nil).AddAddress), arg0, arg1, arg2)
}

// BlockUser mocks base method.
func (m *MockUserUseCase) BlockUser(arg0 context.Context, arg1 model.BlockUser, arg2 int) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockUser indicates an expected call of BlockUser.
func (mr *MockUserUseCaseMockRecorder) BlockUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUser", reflect.TypeOf((*MockUserUseCase)(nil).BlockUser), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockUserUseCase) CreateUser(arg0 context.Context, arg1 model.UserDataInput) (model.UserDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(model.UserDataOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserUseCaseMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserUseCase)(nil).CreateUser), arg0, arg1)
}

// FindUserByID mocks base method.
func (m *MockUserUseCase) FindUserByID(arg0 context.Context, arg1 int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", arg0, arg1)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockUserUseCaseMockRecorder) FindUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockUserUseCase)(nil).FindUserByID), arg0, arg1)
}

// ListAllUsers mocks base method.
func (m *MockUserUseCase) ListAllUsers(arg0 context.Context, arg1 model.QueryParams) ([]domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllUsers", arg0, arg1)
	ret0, _ := ret[0].([]domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllUsers indicates an expected call of ListAllUsers.
func (mr *MockUserUseCaseMockRecorder) ListAllUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllUsers", reflect.TypeOf((*MockUserUseCase)(nil).ListAllUsers), arg0, arg1)
}

// LoginWithEmail mocks base method.
func (m *MockUserUseCase) LoginWithEmail(arg0 context.Context, arg1 model.UserLoginEmail) (string, model.UserDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithEmail", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(model.UserDataOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginWithEmail indicates an expected call of LoginWithEmail.
func (mr *MockUserUseCaseMockRecorder) LoginWithEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockUserUseCase)(nil).LoginWithEmail), arg0, arg1)
}

// LoginWithPhone mocks base method.
func (m *MockUserUseCase) LoginWithPhone(arg0 context.Context, arg1 model.UserLoginPhone) (string, model.UserDataOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithPhone", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(model.UserDataOutput)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginWithPhone indicates an expected call of LoginWithPhone.
func (mr *MockUserUseCaseMockRecorder) LoginWithPhone(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithPhone", reflect.TypeOf((*MockUserUseCase)(nil).LoginWithPhone), arg0, arg1)
}

// UnblockUser mocks base method.
func (m *MockUserUseCase) UnblockUser(arg0 context.Context, arg1 int) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblockUser", arg0, arg1)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnblockUser indicates an expected call of UnblockUser.
func (mr *MockUserUseCaseMockRecorder) UnblockUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblockUser", reflect.TypeOf((*MockUserUseCase)(nil).UnblockUser), arg0, arg1)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCase) UpdateAddress(arg0 context.Context, arg1 model.AddressInput, arg2 int) (domain.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].(domain.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAddress), arg0, arg1, arg2)
}

// UserProfile mocks base method.
func (m *MockUserUseCase) UserProfile(arg0 context.Context, arg1 int) (model.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserProfile", arg0, arg1)
	ret0, _ := ret[0].(model.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserProfile indicates an expected call of UserProfile.
func (mr *MockUserUseCaseMockRecorder) UserProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserProfile", reflect.TypeOf((*MockUserUseCase)(nil).UserProfile), arg0, arg1)
}
